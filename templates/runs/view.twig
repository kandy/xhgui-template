{% extends 'layout/base.twig' %}
{% import 'macros/helpers.twig' as helpers %}

{% block title %}
    - Profile - {{ result.meta.url }}
{% endblock %}

{% block content %}

    <div class="row-fluid">
        <div class="span9">
            <div class="sidebar-nav">
                <ul class="nav nav-list">
                    <li class="nav-header">This Run</li>
                    <a href="{{ url('run.compare', {base: result.id|trim }) }}" id="compare-button" class="btn back-link">
                        Compare this run
                    </a>
                    <a href="{{ url('run.callgraph', {id: result.id|trim }) }}" class="btn back-link">
                        View Callgraph
                    </a>
                    <a href="#functions" class="btn back-link">
                        Jump to functions
                    </a>
                    <li><strong>URL</strong> <a href="{{ url('url.view', {'url': result.meta('url') }) }}">{{ result.meta('url') }}</a></li>
                    <li><strong>Time</strong> {{ result.date|date(date_format) }}</li>
                    <li><strong>ID</strong> <a href="{{ url('custom.help', {id: result.id|trim }) }}">{{ result.id }}</a></li>
                    {#
                    <li><strong>Wall Time</strong> {{ result.get('main()', 'wt')|as_time }}</li>
                    <li><strong>CPU Time</strong> {{ result.get('main()', 'cpu')|as_time }}</li>
                    <li><strong>Memory Usage</strong> {{ result.get('main()', 'mu')|as_bytes }}</li>
                    <li><strong>Peak Memory Usage</strong> {{ result.get('main()', 'pmu')|as_bytes }}</li>

                    <li class="nav-header">GET</li>
                    <li>{{ helpers.property_list('GET', result.meta('get')) }}</li>
        <!--
                    <li class="nav-header">SERVER</li>
                    <li>{{ helpers.property_list('SERVER', result.meta('SERVER')) }}
        -->
                    <li class="nav-header">Waterfall</li>
                    <li><strong>By IP</strong> <a href="{{ url('waterfall.list', {'remote_addr': result.meta.SERVER.REMOTE_ADDR, 'request_start': result.meta.SERVER.REQUEST_TIME - 5, 'request_end': result.meta.SERVER.REQUEST_TIME + 15}) }}">{{ result.meta.SERVER.REMOTE_ADDR }}</a></li>
                    #}

                </ul>
            </div>
        </div>

        <div class="row-fluid form-search">
            <div class="pull-right form-search">
                <input type="search" id="function-filter" placeholder="Filter by function name" />
            </div>
        </div>

        <div class="row-fluid" data-role="grid" data-profile="{{ profile|json_encode }}" style="height: calc(90vh - 100px)">

        </div>

    </div>
    <div id="callgraph-details">
        <span class="button-close pull-right">&#10799;</span>
        <div class="details-content">
        </div>
    </div>
{% endblock %}

{% block jsfoot %}
    <script src="{{ static('js/jquery-ui.min.js') }}" type="text/javascript"></script>
    <script src="{{ static('js/jquery.event.drag-2.3.js') }}" type="text/javascript"></script>

    <script src="{{ static('js/slick/slick.core.js') }}" type="text/javascript"></script>
    <script src="{{ static('js/slick/slick.formatters.js') }}" type="text/javascript"></script>
    <script src="{{ static('js/slick/slick.dataview.js') }}" type="text/javascript"></script>
    <script src="{{ static('js/slick/slick.grid.js') }}" type="text/javascript"></script>
    <script src="{{ static('js/slick/slick.groupitemmetadataprovider.js') }}" type="text/javascript"></script>


    <script type="text/javascript">
        jQuery(function($){

            var nameFormatter =  function(column, row, data) {
                var namesPart = (data || '').split('::');
                var fname ='<a href="{{ url('run.symbol', {'id': result.id|trim}) }}&amp;symbol='
                    + window.encodeURI(data) +'" title="' + data + '" class="cell-p-fname">'
                    +  namesPart.pop() + '</b></a>';
                namesPart = namesPart.length ? namesPart.pop().split(/\\|_/) : namesPart;

                var className = namesPart.length ? '<b class="cell-p-class">' + namesPart.pop() + '</b>' : '';

                return className + fname;
            };
            var groupFormatter =  function(column, row, data) {
                var namesPart = (data || '').split('::');
                namesPart = namesPart.length ? namesPart.shift().split(/\\|_/) : namesPart;
                var className = namesPart.pop();
                var vendor = namesPart.length ? '<b class="cell-p-vendor">' + namesPart.splice(0, 1) + '</b>' : '';
                var path = namesPart.length ? '<b class="cell-p-path">' + namesPart.join(' / ') + '</b>' : '';

                return vendor + path;
            };
            var numberFormater = function(column, row, data) {
                return parseFloat(data).toFixed(0).replace(/./g, function (c, i, a) {
                    return i && c !== "." && !((a.length - i) % 3) ? ' ' + c : c;
                })
            };
            var groupFormater = function(field) {
                return function(totals) {
                    return totals.sum[field]
                }
            };
            var percentFormater = function(style) {
                return function(column, row, data) {
                    return '<b>' + (Math.round(data*100)/100).toFixed(2) + '</b>' +
                        '<i>%</i>' +
                        '<span ' +
                        'class="percent-complete-bar" ' +
                        'style="background:hsl(' + 160 + (400/style)*(data/100) + ',100%,50%); ' +
                        'width:' + (100/style) * Math.sqrt(data/100) + '%">' +
                        '</span>';
                };

            };
            var columns = [
                {
                    id: "id",
                    name: "#",
                    field: "id",
                    maxWidth: 50,
                    sortable: true,
                    cssClass: "cell-int"
                },
                {
                    id: "group",
                    name: "Group:",
                    field: "name",
                    sortable: true,
                    cssClass: "cell-call",
                    minWidth: 400,
                    type: 'string',
                    formatter: groupFormatter
                },
                {
                    id: "name",
                    name: "Name:",
                    field: "name",
                    sortable: true,
                    cssClass: "cell-call-right",
                    minWidth: 300,
                    type: 'string',
                    formatter: nameFormatter
                },
                {
                    id: "count",
                    name: "Count:",
                    field: "ct",
                    sortable: true,
                    cssClass: "cell-int",
                    formatter: numberFormater
                },
                {
                    id: "ecpu",
                    name: "Cpu:",
                    field: "ecpu",
                    sortable: true,
                    cssClass: "cell-int",
                    formatter: numberFormater,
                    groupTotalsFormatter: groupFormater('ecpu')
                },
                {
                    id: "wt",
                    name: "Time:",
                    field: "ewt",
                    sortable: true,
                    cssClass: "cell-int",
                    formatter: numberFormater
                },
                {
                    id: "epmu",
                    name: "Mem",
                    field: "epmu",
                    sortable: true,
                    cssClass: "cell-int",
                    formatter: numberFormater
                },
                {
                    id: "pewt",
                    name: "%",
                    field: "pewt",
                    minWidth: 100,
                    sortable: true,
                    cssClass: "cell-percent",
                    formatter: percentFormater(1),
                    groupTotalsFormatter: groupFormater('pewt')
                },
                {
                    id: "percent",
                    name: "% Total",
                    field: "pwt",
                    minWidth: 100,
                    sortable: true,
                    cssClass: "cell-percent",
                    formatter: percentFormater(2)
                }
            ];
            var options = {
                enableCellNavigation: false,
                forceFitColumns: true,
                showHeaderRow: false,
                headerRowHeight: 30,
                explicitInitialization: true,
                multiColumnSort: false
            };

            var $gridContainer = $('[data-role="grid"]');

            var dataView = new Slick.Data.DataView();
            var grid = new Slick.Grid($gridContainer, dataView, columns, options);

            grid.onSort.subscribe(function(e, args) {
                var cols = args.multiColumnSort ? args.sortCols : [args];

                dataView.sort(function(dataRow1, dataRow2) {
                    for (var i = 0, l = cols.length; i < l; i++) {
                        var field = cols[i].sortCol.field;
                        var sign = cols[i].sortAsc ? 1 : -1;
                        var type = cols[i].sortCol.cssClass === 'cell-int'
                        || cols[i].sortCol.cssClass === 'cell-percent'
                            ? 'int' : 'string';
                        if (type == 'int') {
                            var value1 = new Number(dataRow1[field]), value2 = new Number(dataRow2[field]);
                        } else {
                            var value1 = new String(dataRow1[field]), value2 = new String(dataRow2[field]);
                        }
                        var result = (value1 == value2 ? 0 : (value1 > value2 ? 1 : -1)) * sign;
                        if (result != 0) {
                            return result;
                        }
                    }
                    return 0;
                });
                grid.invalidate();

            });
            grid.init();
            var data = $gridContainer.data('profile');
            dataView.beginUpdate();
            dataView.setItems(data);
            dataView.setFilterArgs({searchString: ''});
            dataView.setFilter(function(item, args) {
                var re = new RegExp(args.searchString.replace(/\\/g, '\\\\'), 'ig');
                return args.searchString === '' || re.test(item['name']);
            });
            dataView.endUpdate();
            dataView.refresh();
            grid.invalidate();
            $('#function-filter').keyup(function (e) {
                // clear on Esc
                if (e.which === 27) {
                    this.value = "";
                }
                dataView.setFilterArgs({
                    searchString: this.value
                });
                dataView.refresh();
                grid.invalidate();
            });

        });
    </script>
{% endblock %}